{"version":3,"sources":["history.js","reducers.js","components/Topic.js","pages/Message/actions.js","pages/Message/reducer.js","api.js","pages/Message/selectors.js","pages/Message/saga.js","pages/Message/index.js","constant/index.js","pages/Chat/actions.js","pages/Chat/reducer.js","pages/Chat/selectors.js","pages/Chat/saga.js","pages/Chat/index.js","pages/Home/actions.js","pages/Home/reducer.js","pages/Startup/actions.js","pages/Home/selectors.js","pages/Home/saga.js","pages/Home/index.js","pages/Register/actions.js","pages/Register/reducer.js","pages/Register/selectors.js","pages/Register/saga.js","pages/Register/index.js","pages/Startup/reducer.js","pages/Startup/selectors.js","pages/Route/index.js","pages/Startup/saga.js","pages/Startup/index.js","App.js","configureStore.js","reportWebVitals.js","index.js"],"names":["history","createHashHistory","hashType","createReducer","injectedReducers","rootReducer","combineReducers","router","connectRouter","layout","labelCol","span","wrapperCol","tailLayout","offset","Topic","form","isModalVisible","handleOk","handleCancel","title","centered","visible","onOk","onCancel","footer","onFinish","align","justify","Item","label","name","rules","required","message","type","htmlType","MESSAGE_REQUEST","MESSAGE_SUCCESS","MESSAGE_ERROR","NEW_MESSAGE_REQUEST","NEW_MESSAGE_SUCCESS","NEW_MESSAGE_ERROR","NEW_SOCKET_MESSAGE_SUCCESS","initialState","content","isLoading","error","messages","slug","loginPageReducer","produce","draft","action","push","request","axios","create","API_HOST","process","interceptors","use","config","token","localStorage","getItem","headers","Authorization","onLogin","user","post","then","res","data","catch","err","response","onRegister","onGetUser","get","onChatroom","onCreateChatroom","topic","chatroom","onLoadMessage","onCreateMessage","messageState","state","messageList","makeSelectSlug","createSelector","substate","onMessage","onNewMessage","loginPageSaga","select","call","success","put","console","log","takeLatest","TextArea","Input","key","Message","useInjectReducer","reducer","useInjectSaga","saga","dispatch","useDispatch","stateSelector","createStructuredSelector","useSelector","el","useRef","useParams","Form","useForm","useEffect","cableRef","actionCable","createConsumer","subscriptions","channel","chatroom_slug","connected","disconnected","received","current","scrollIntoView","consumer","disconnect","messageAction","setTimeout","className","style","height","overflow","header","length","dataSource","bordered","ref","renderItem","item","actions","author","username","avatar","datetime","created_at","resetFields","rows","placeholder","textAlign","OPEN_MODAL_REQUEST","CLOSE_MODAL_REQUEST","CHAT_REQUEST","CHAT_SUCCESS","CHAT_ERROR","CHAT_CREATE_REQUEST","CHAT_CREATE_SUCCESS","CHAT_CREATE_ERROR","chatroomCreateSuccessAction","chatroomCreateErrorAction","rooms","modalOpen","chatPageReducer","splice","chatroomState","createChatroom","chatroomPageSaga","notification","info","description","placement","Content","Layout","Sider","Chat","useRouteMatch","path","url","padding","marginTop","position","left","top","theme","mode","map","room","index","Divider","to","marginLeft","minHeight","gutter","Title","onClick","chatroomCreateAction","exact","component","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","loginErrorAction","body","CHECK_LOGIN_REQUEST","CHECK_LOGIN_SUCCESS","CHECK_LOGIN_ERROR","checkLoginSuccessAction","checkLoginErrorAction","authState","auth","login","setItem","Home","initialValues","password","loginAction","Password","Paragraph","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","registerSuccessAction","registerState","register","Register","first_name","last_name","isLogged","checkLoginPageReducer","root","Header","Footer","PrivateRoute","Component","rest","render","props","zIndex","width","defaultSelectedKeys","PublicRoute","restricted","checkLogin","Startup","children","store","composeEnhancers","compose","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","routerMiddleware","logger","enhancers","applyMiddleware","createInjectorsEnhancer","createStore","configureStore","App","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b2f1f21.chunk.js","sourcesContent":["import { createHashHistory } from 'history';\n\nconst history = createHashHistory({ hashType: \"hashbang\" });\n\nexport default history;\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport history from './history';\n\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n","import { Button, Col, Form, Input, Modal, Row } from 'antd';\nimport React from 'react';\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Topic = ({ form, isModalVisible, handleOk, handleCancel }) => {\n\n    return (\n        <>\n            <Modal title=\"Create Chat Topic\"\n                centered\n                visible={isModalVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                footer={null}>\n                <Form\n                    {...layout}\n                    form={form}\n                    onFinish={handleOk}\n                >\n                    <Row align='middle'\n                        justify='center'>\n                        <Col span={16}>\n                            <Form.Item\n                                label=\"Topic Name\"\n                                name=\"topic\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your topic name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                                </Button>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                </Form>\n            </Modal>\n        </>\n    )\n}\n\nexport default Topic;","export const MESSAGE_REQUEST = 'app/MessagePage/MESSAGE_REQUEST';\nexport const MESSAGE_SUCCESS = 'app/MessagePage/MESSAGE_SUCCESS';\nexport const MESSAGE_ERROR = 'app/MessagePage/MESSAGE_ERROR';\n\nexport const NEW_MESSAGE_REQUEST = 'app/MessagePage/NEW_MESSAGE_REQUEST';\nexport const NEW_MESSAGE_SUCCESS = 'app/MessagePage/NEW_MESSAGE_SUCCESS';\nexport const NEW_MESSAGE_ERROR = 'app/MessagePage/NEW_MESSAGE_ERROR';\n\nexport const NEW_SOCKET_MESSAGE_SUCCESS = 'app/MessagePage/NEW_SOCKET_MESSAGE_SUCCESS';\n\n\nexport function messageAction(slug) {\n  return {\n    slug,\n    type: MESSAGE_REQUEST,\n  };\n}\n\nexport function messageSuccessAction(messages) {\n  return {\n    type: MESSAGE_SUCCESS,\n    messages,\n  };\n}\n\nexport function messageErrorAction(error) {\n  return {\n    type: MESSAGE_ERROR,\n    error,\n  };\n}\n\nexport function newMessageAction(content) {\n  return {\n    type: NEW_MESSAGE_REQUEST,\n    content,\n  };\n}\n\nexport function newMessageSuccessAction(message) {\n  return {\n    type: NEW_MESSAGE_SUCCESS,\n    message,\n  };\n}\n\nexport function newMessageErrorAction(error) {\n  return {\n    type: NEW_MESSAGE_ERROR,\n    error,\n  };\n}\n\nexport function addNewMessageSocketAction(message) {\n  return {\n    type: NEW_SOCKET_MESSAGE_SUCCESS,\n    message,\n  };\n}","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport { MESSAGE_ERROR, MESSAGE_REQUEST, MESSAGE_SUCCESS, NEW_MESSAGE_ERROR, NEW_MESSAGE_REQUEST, NEW_MESSAGE_SUCCESS, NEW_SOCKET_MESSAGE_SUCCESS } from './actions';\n\nexport const initialState = {\n  content: null,\n  isLoading: false,\n  error: {},\n  messages: [],\n  slug: null,\n  message: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case MESSAGE_REQUEST:\n      draft.slug = action.slug;\n      draft.isLoading = true;\n      break;\n    case MESSAGE_SUCCESS:\n      draft.messages = action.messages;\n      draft.isLoading = false;\n      break;\n    case MESSAGE_ERROR:\n      draft.isLoading = false;\n      draft.error = action.error;\n      break;\n\n    case NEW_MESSAGE_REQUEST:\n      draft.isLoading = true;\n      draft.content = action.content\n      break;\n    case NEW_MESSAGE_SUCCESS:\n      draft.message = action.message;\n      draft.isLoading = false;\n      break;\n    case NEW_MESSAGE_ERROR:\n      draft.isLoading = false;\n      draft.error = action.error;\n      break;\n\n    case NEW_SOCKET_MESSAGE_SUCCESS:\n      draft.messages.push(action.message);\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import axios from 'axios';\n\nconst request = axios.create();\nconst API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n// const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n\nrequest.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"token\");\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n})\n\nexport const onLogin = (user) => {\n  return axios.post(`${API_HOST}/login`, { user })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onRegister = (user) => {\n  return axios.post(`${API_HOST}/signup`, { user })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onGetUser = () => {\n  return request.get(`${API_HOST}/user`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onChatroom = () => {\n  return request.get(`${API_HOST}/chatrooms`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onCreateChatroom = (topic) => {\n  return request.post(`${API_HOST}/chatrooms`, { chatroom: topic })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onLoadMessage = (slug) => {\n  return request.get(`${API_HOST}/chatrooms/${slug}/messages`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onCreateMessage = (slug, content) => {\n  return request.post(`${API_HOST}/chatrooms/${slug}/messages`,\n    {\n      message: { content }\n    })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst messageState = state => state.messageList || initialState\n\nconst makeSelectContent = () =>\n  createSelector(messageState, (substate) => substate.content);\n\n  const makeSelectSlug = () =>\n  createSelector(messageState, (substate) => substate.slug);\n\nconst makeSelectMessages = () =>\n  createSelector(messageState, (substate) => substate.messages);\n\n\nexport {\n  messageState,\n  makeSelectContent,\n  makeSelectMessages,\n  makeSelectSlug,\n};\n","import { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onCreateMessage, onLoadMessage } from '../../api';\nimport { messageSuccessAction, MESSAGE_REQUEST, newMessageSuccessAction, NEW_MESSAGE_REQUEST } from './actions';\nimport { makeSelectContent, makeSelectSlug } from './selectors';\n\nexport function* onMessage() {\n  const slug = yield select(makeSelectSlug());\n  try {\n    const { data, success } = yield call(onLoadMessage, slug);\n    if (success) {\n      yield put(messageSuccessAction(data.messages));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport function* onNewMessage() {\n  const slug = yield select(makeSelectSlug());\n  const content = yield select(makeSelectContent());\n  try {\n    const { data, success } = yield call(onCreateMessage, slug, content);\n    if (success) {\n      yield put(newMessageSuccessAction(data.message));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(MESSAGE_REQUEST, onMessage);\n  yield takeLatest(NEW_MESSAGE_REQUEST, onNewMessage);\n}\n","import actionCable from 'actioncable';\nimport { Button, Comment, Form, Input, List } from 'antd';\nimport React, { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { createStructuredSelector } from 'reselect';\nimport { WS_HOST } from '../../constant';\nimport { addNewMessageSocketAction, messageAction, newMessageAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\nimport { makeSelectMessages } from './selectors';\n\nconst { TextArea } = Input;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst key = 'messageList';\n\nconst Message = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    const dispatch = useDispatch();\n    const stateSelector = createStructuredSelector({\n        messages: makeSelectMessages(),\n    });\n    const { messages } = useSelector(stateSelector);\n\n    const el = useRef(null);\n    const { slug } = useParams();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        const cable = actionCable.createConsumer(WS_HOST);\n        const cableRef = cable.subscriptions.create({\n            channel: `MessagesChannel`,\n            chatroom_slug: `messages_${slug}`\n        }, {\n            connected: () => {\n                console.log(\"connected!\")\n            },\n            disconnected: () => {\n                console.log('disconnected');\n            },\n            received: data => {\n                dispatch(addNewMessageSocketAction(data.message));\n                console.log('inputEl: ', el);\n                el.current.scrollIntoView()\n            }\n        })\n        return () => {\n            cableRef.consumer.disconnect();\n        };\n    }, [slug, dispatch])\n\n    useEffect(() => {\n        dispatch(messageAction(slug));\n        setTimeout(() => el.current.scrollIntoView(), 500)\n    }, [slug, dispatch])\n\n\n    return (\n        <>\n            <h3>Chat Room: {slug}</h3>\n            <List\n                className=\"comment-list\"\n                style={{\n                    height: 380,\n                    overflow: 'auto'\n                }}\n                header={`${messages.length} replies`}\n                dataSource={messages}\n                bordered={true}\n                footer={<div ref={el} />}\n                renderItem={item => (\n                    <Comment\n                        actions={item.actions}\n                        author={item.user.username}\n                        avatar='https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png'\n                        content={item.content}\n                        datetime={item.created_at}\n                    />\n                )}\n            />\n\n            <Form\n                {...layout}\n                name=\"basic\"\n                onFinish={(message) => { dispatch(newMessageAction(message.content)); form.resetFields(); }}\n                form={form}\n            >\n                <Form.Item\n                    wrapperCol={{ span: 24 }}\n                    name=\"content\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your message!',\n                        },\n                    ]}\n                >\n                    <TextArea rows={2} placeholder='Message...' />\n                </Form.Item>\n\n                <Form.Item\n                    wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n                    <Button type=\"primary\" htmlType=\"submit\"> Submit </Button>\n                </Form.Item>\n            </Form>\n        </>\n    );\n}\n\nexport default Message;","export const API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n\nexport const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n","export const OPEN_MODAL_REQUEST = 'app/ChatPage/OPEN_MODAL_REQUEST';\nexport const CLOSE_MODAL_REQUEST = 'app/ChatPage/CLOSE_MODAL_REQUEST';\nexport const CHAT_REQUEST = 'app/ChatPage/CHAT_REQUEST';\nexport const CHAT_SUCCESS = 'app/ChatPage/CHAT_SUCCESS';\nexport const CHAT_ERROR = 'app/ChatPage/CHAT_ERROR';\nexport const CHAT_CREATE_REQUEST = 'app/ChatPage/CHAT_CREATE_REQUEST';\nexport const CHAT_CREATE_SUCCESS = 'app/ChatPage/CHAT_CREATE_SUCCESS';\nexport const CHAT_CREATE_ERROR = 'app/ChatPage/CHAT_CREATE_ERROR';\n\n\nexport function opneModalAction() {\n  return {\n    type: OPEN_MODAL_REQUEST,\n  };\n}\n\nexport function closeModalAction() {\n  return {\n    type: CLOSE_MODAL_REQUEST,\n  };\n}\n\nexport function chatroomAction() {\n  return {\n    type: CHAT_REQUEST,\n  };\n}\n\nexport function chatroomSuccessAction(rooms) {\n  return {\n    type: CHAT_SUCCESS,\n    rooms,\n  };\n}\n\nexport function chatroomErrorAction(error) {\n  return {\n    type: CHAT_ERROR,\n    error,\n  };\n}\n\nexport function chatroomCreateAction(topic) {\n  return {\n    type: CHAT_CREATE_REQUEST,\n    topic\n  };\n}\n\nexport function chatroomCreateSuccessAction(chatroom, message) {\n  return {\n    type: CHAT_CREATE_SUCCESS,\n    chatroom,\n    message\n  };\n}\n\nexport function chatroomCreateErrorAction(error, message) {\n  return {\n    type: CHAT_CREATE_ERROR,\n    error,\n    message\n  };\n}","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport {\n  CHAT_CREATE_ERROR,\n  CHAT_CREATE_REQUEST,\n  CHAT_CREATE_SUCCESS,\n  CHAT_ERROR,\n  CHAT_REQUEST,\n  CHAT_SUCCESS,\n  CLOSE_MODAL_REQUEST,\n  OPEN_MODAL_REQUEST\n} from './actions';\n\nexport const initialState = {\n  rooms: [],\n  isLoading: false,\n  error: {},\n  topic: {},\n  message: \"\",\n  modalOpen: false,\n};\n\nconst chatPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case CHAT_REQUEST:\n      draft.isLoading = true;\n      break;\n    case CHAT_SUCCESS:\n      draft.rooms = action.rooms;\n      draft.isLoading = false;\n      break;\n    case CHAT_ERROR:\n      draft.error = action.error;\n      draft.isLoading = false;\n      break;\n\n    case CHAT_CREATE_REQUEST:\n      draft.isLoading = true;\n      draft.topic = action.topic\n      break;\n    case CHAT_CREATE_SUCCESS:\n      draft.rooms.splice(0, 0, action.chatroom);\n      draft.message = action.message;\n      draft.isLoading = false;\n      draft.modalOpen = false;\n      break;\n    case CHAT_CREATE_ERROR:\n      draft.error = action.error;\n      draft.message = action.message;\n      draft.isLoading = true;\n      break;\n\n    case OPEN_MODAL_REQUEST:\n      draft.modalOpen = true;\n      break;\n\n    case CLOSE_MODAL_REQUEST:\n      draft.modalOpen = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default chatPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst chatroomState = state => state.chatroom || initialState\n\nconst makeSelectRooms = () =>\n  createSelector(chatroomState, (substate) => substate.rooms);\n\nconst makeSelectError = () =>\n  createSelector(chatroomState, (substate) => substate.error);\n\nconst makeSelectModalOpen = () =>\n  createSelector(chatroomState, (substate) => substate.modalOpen);\n\n  const makeSelectMessage = () =>\n  createSelector(chatroomState, (substate) => substate.message);\n\nconst makeSelectTopic = () =>\n  createSelector(chatroomState, (substate) => substate.topic);\n\nexport {\n  chatroomState,\n  makeSelectRooms,\n  makeSelectError,\n  makeSelectModalOpen,\n  makeSelectTopic,\n  makeSelectMessage,\n};\n","import { notification } from 'antd';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onChatroom, onCreateChatroom } from '../../api';\nimport {\n  chatroomCreateErrorAction,\n  chatroomCreateSuccessAction,\n  chatroomSuccessAction,\n  CHAT_CREATE_REQUEST,\n  CHAT_REQUEST\n} from './actions';\nimport { makeSelectTopic } from './selectors';\n\nexport function* chatroom() {\n  try {\n    const { data, success } = yield call(onChatroom);\n    if (success) {\n      yield put(chatroomSuccessAction(data.rooms));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport function* createChatroom() {\n  const topic = yield select(makeSelectTopic());\n  try {\n    const { data, success, message } = yield call(onCreateChatroom, topic);\n    if (success) {\n      yield put(chatroomCreateSuccessAction(data.chatroom, message));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(chatroomCreateErrorAction({}, message));\n      notification.error({\n        message: message,\n        placement: 'bottomRight'\n      })\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(chatroomCreateErrorAction(err, \"\"));\n    notification.error({\n      message: err,\n      placement: 'bottomRight'\n    })\n  }\n}\nexport default function* chatroomPageSaga() {\n  yield takeLatest(CHAT_REQUEST, chatroom);\n  yield takeLatest(CHAT_CREATE_REQUEST, createChatroom);\n}\n","import { Button, Card, Col, Form, Layout, Menu, Row, Typography } from 'antd';\nimport React, { Fragment, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { createStructuredSelector } from 'reselect';\nimport Topic from '../../components/Topic';\nimport Message from '../Message';\nimport { chatroomAction, chatroomCreateAction, closeModalAction, opneModalAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\nimport { makeSelectModalOpen, makeSelectRooms } from './selectors';\n\nconst { Content, Sider } = Layout;\n\nconst key = 'chatroom';\n\nconst Chat = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    const dispatch = useDispatch();\n    const stateSelector = createStructuredSelector({\n        rooms: makeSelectRooms(),\n        isModalVisible: makeSelectModalOpen(),\n    });\n    const { rooms, isModalVisible } = useSelector(stateSelector);\n    const { path, url } = useRouteMatch();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        dispatch(chatroomAction());\n    }, [dispatch])\n\n    return (\n        <>\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Layout>\n                    <Sider style={{\n                        overflow: 'auto',\n                        height: 'calc(100vh - 60px)',\n                        position: 'fixed',\n                        left: 0,\n                        top: 60\n                    }}\n                    >\n                        <Menu theme=\"dark\" mode=\"inline\" >\n                            {rooms.map((room, index) => (\n                                <Fragment key={index}>\n                                    <Menu.Divider type=\"horizontal\" />\n                                    <Menu.Item key={index} >\n                                        <Link to={`${url}/${room.slug}`}>{room.topic}</Link>\n                                    </Menu.Item>\n                                </Fragment>\n                            ))}\n                        </Menu>\n                    </Sider>\n                    <Layout className=\"site-layout\" style={{ marginLeft: 200, marginTop: 20 }}>\n                        <Row align='middle' justify='center' style={{ minHeight: '250px' }}>\n                            <Col span={24}>\n                                <Row\n                                    gutter={[16, 16]}\n                                    align='middle'\n                                    justify='space-between'>\n                                    <Col>\n                                        <Typography.Title>Welcome to Chat App</Typography.Title>\n                                    </Col>\n                                    <Col>\n                                        <Button\n                                            type=\"primary\"\n                                            onClick={() => dispatch(opneModalAction())}>\n                                            Create Topic\n                                        </Button>\n                                    </Col>\n                                </Row>\n\n                                <Topic\n                                    form={form}\n                                    isModalVisible={isModalVisible}\n                                    handleOk={(topic) => dispatch(chatroomCreateAction(topic))}\n                                    handleCancel={() => dispatch(closeModalAction())} />\n                            </Col>\n\n                            <Col span={24}>\n                                <Card>\n                                    {rooms.length <= 0 ? (\n                                        <h3> No topic found </h3>\n                                    ) : (\n                                        <Switch>\n                                            <Route exact path={path} component={() => <h3>Please select a chat topic.</h3>} />\n                                            <Route path={`${path}/:slug`} component={Message} />\n                                        </Switch>\n                                    )}\n\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Layout>\n                </Layout>\n            </Content>\n        </>\n    )\n}\n\nexport default Chat;","export const LOGIN_REQUEST = 'app/LoginPage/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/LoginPage/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/LoginPage/LOGIN_ERROR';\n\n\nexport function loginAction(user) {\n  return {\n    user,\n    type: LOGIN_REQUEST,\n  };\n}\n\nexport function loginSuccessAction() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nexport function loginErrorAction(error) {\n  return {\n    type: LOGIN_ERROR,\n    error,\n  };\n}\n","import produce from 'immer';\nimport { LOGIN_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  isLoading: false,\n  error: {},\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      draft.body = action.user;\n      draft.isLoading = true;\n      break;\n    case LOGIN_SUCCESS:\n      draft.isLoading = false;\n      break;\n    case LOGIN_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","export const CHECK_LOGIN_REQUEST = 'app/StartUpPage/CHECK_LOGIN_REQUEST';\nexport const CHECK_LOGIN_SUCCESS = 'app/StartUpPage/CHECK_LOGIN_SUCCESS';\nexport const CHECK_LOGIN_ERROR = 'app/StartUpPage/CHECK_LOGIN_ERROR';\n\nexport function checkLoginAction(token) {\n  return {\n    type: CHECK_LOGIN_REQUEST,\n    token,\n  };\n}\n\nexport function checkLoginSuccessAction(user,token) {\n  return {\n    type: CHECK_LOGIN_SUCCESS,\n    token,\n    user\n  };\n}\n\nexport function checkLoginErrorAction(error) {\n  return {\n    type: CHECK_LOGIN_ERROR,\n    error,\n  };\n}\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.auth || initialState\n\nconst makeSelectBody = () =>\n  createSelector(authState, (substate) => substate.body);\n\nexport {\n  authState,\n  makeSelectBody,\n};\n","import { notification } from 'antd';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onLogin } from '../../api';\nimport { checkLoginSuccessAction } from '../Startup/actions';\nimport { loginErrorAction, loginSuccessAction, LOGIN_REQUEST } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* login() {\n  const user = yield select(makeSelectBody());\n  try {\n    const { data, success, message } = yield call(onLogin, user);\n    if (success) {\n      localStorage.setItem('token', data.token);\n      yield put(loginSuccessAction());\n      yield put(checkLoginSuccessAction(data.user, data.token));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(loginErrorAction({}));\n      notification.error({\n        description: message,\n        placement: 'bottomRight',\n      });\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(loginErrorAction(err));\n    notification.info({\n      description: err,\n      placement: 'bottomRight',\n    });\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { loginAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst key = 'auth';\n\nconst Home = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    return (\n        <>\n\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Row align='middle'\n                    justify='center'\n                    style={{ minHeight: '300px' }}>\n                    <Col span={10}>\n                        <Typography.Title>Welcome to Chat App</Typography.Title>\n                        <Form\n                            {...layout}\n                            initialValues={{\n                                username: 'test',\n                                password: 'test'\n                            }}\n                            onFinish={(user) => dispatch(loginAction(user))}\n                        >\n                            <Form.Item\n                                label=\"Username\"\n                                name=\"username\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Password\"\n                                name=\"password\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!',\n                                    },\n                                ]}\n                            >\n                                <Input.Password />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Typography.Paragraph>\n                                    Don't you have an account? <Link to=\"/register\"> Register here</Link>\n                                </Typography.Paragraph>\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">Login</Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </Content>\n        </>\n    )\n}\n\nexport default Home;","export const REGISTER_REQUEST = 'app/RegisterPage/REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'app/RegisterPage/REGISTER_SUCCESS';\nexport const REGISTER_ERROR = 'app/RegisterPage/REGISTER_ERROR';\n\n\nexport function registerAction(body) {\n  return {\n    body,\n    type: REGISTER_REQUEST,\n  };\n}\n\nexport function registerSuccessAction(user, message) {\n  return {\n    type: REGISTER_SUCCESS,\n    user,\n    message,\n  };\n}\n\nexport function registerErrorAction(error, message) {\n  return {\n    type: REGISTER_ERROR,\n    error,\n  };\n}\n","import produce from 'immer';\nimport { REGISTER_ERROR, REGISTER_REQUEST, REGISTER_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  message: '',\n  isLoading: false,\n  error: {},\n  user: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case REGISTER_REQUEST:\n      draft.body = action.body;\n      draft.isLoading = true;\n      break;\n    case REGISTER_SUCCESS:\n      draft.message = action.message;\n      draft.user = action.user;\n      draft.isLoading = false;\n      break;\n    case REGISTER_ERROR:\n      draft.body = action.error;\n      draft.message = action.message;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst registerState = state => state.register || initialState\n\nconst makeSelectBody = () =>\n  createSelector(registerState, (substate) => substate.body);\n\nexport {\n  registerState,\n  makeSelectBody,\n};\n","import { notification } from 'antd';\nimport { push } from 'connected-react-router';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onRegister } from '../../api';\nimport { registerErrorAction, registerSuccessAction, REGISTER_REQUEST } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* register() {\n  const user = yield select(makeSelectBody());\n  try {\n    const { data, success, message } = yield call(onRegister, user);\n    if (success) {\n      yield put(registerSuccessAction(data.user, message));\n      yield put(push('/login'));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(registerErrorAction({}, message));\n      notification.error({\n        message: message,\n        placement: 'bottomRight'\n      })\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    notification.error({\n      message: err,\n      placement: 'bottomRight'\n    })\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(REGISTER_REQUEST, register);\n}\n","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { registerAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst key = 'register';\n\nconst Register = () => {\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    return (\n        <>\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Row align='middle'\n                    justify='center'\n                    style={{ minHeight: '300px' }}>\n                    <Col span={10}>\n                        <Typography.Title>Welcome to Chat App</Typography.Title>\n                        <Form\n                            {...layout}\n                            name=\"basic\"\n                            initialValues={{\n                                username: 'test',\n                                password: 'test',\n                                first_name: 'hi',\n                                last_name: 'there'\n                            }}\n                            onFinish={(user) => dispatch(registerAction(user))}\n                        >\n                            <Form.Item\n                                label=\"First Name\"\n                                name=\"first_name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your first name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Last Name\"\n                                name=\"last_name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your last name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Username\"\n                                name=\"username\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Password\"\n                                name=\"password\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!',\n                                    },\n                                ]}\n                            >\n                                <Input.Password />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Typography.Paragraph>\n                                    Already have an account?   <Link to=\"/\"> Login here</Link>\n                                </Typography.Paragraph>\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </Content>\n        </>\n    )\n}\n\nexport default Register;","import produce from 'immer';\nimport { CHECK_LOGIN_ERROR, CHECK_LOGIN_REQUEST, CHECK_LOGIN_SUCCESS } from './actions';\n\nexport const initialState = {\n  token: '',\n  isLoading: false,\n  isLogged: false,\n  error: {},\n  user: {}\n};\n\nconst checkLoginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case CHECK_LOGIN_REQUEST:\n      draft.token = action.token;\n      draft.isLoading = true;\n      break;\n    case CHECK_LOGIN_SUCCESS:\n      draft.token = action.token;\n      draft.user = action.user;\n      draft.isLogged = true;\n      draft.isLoading = false;\n      break;\n    case CHECK_LOGIN_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default checkLoginPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.root || initialState\n\nconst makeSelectIsLogged = () =>\n  createSelector(authState, (substate) => substate.isLogged);\n\n  const makeSelectToken= () =>\n  createSelector(authState, (substate) => substate.token);\n\nexport {\n  authState,\n  makeSelectIsLogged,\n  makeSelectToken,\n};\n","import { Col, Layout, Menu, Row } from 'antd';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Redirect, Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { makeSelectIsLogged } from '../Startup/selectors';\n\n\nconst { Header, Footer } = Layout;\n\nconst stateSelector = createStructuredSelector({\n  isLogged: makeSelectIsLogged(),\n});\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n  const { isLogged } = useSelector(stateSelector);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogged ? (\n          <>\n            <Layout>\n              <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n                <Row justify=\"space-between\">\n                  <Col span={10}>\n                    <div className=\"logo\" />\n                    <Menu theme=\"dark\"\n                      mode=\"horizontal\"\n                      defaultSelectedKeys={['0']}>\n                      <Menu.Item key=\"1\">Home</Menu.Item>\n                      <Menu.Item key=\"2\">Feeds</Menu.Item>\n                    </Menu>\n                  </Col>\n                  <Col span={8}>\n                    <Row justify=\"end\">\n                      <Col>\n                        <Menu theme=\"dark\"\n                          mode=\"horizontal\">\n                          <Menu.Item key=\"3\">Profile</Menu.Item>\n                          <Menu.Item key=\"4\">Logout</Menu.Item>\n                        </Menu>\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Header>\n              <Component {...props} />\n              <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n            </Layout>\n          </>\n        ) : <Redirect to='/login' />\n      }\n    />\n  );\n}\n\nexport const PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  const { isLogged } = useSelector(stateSelector);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogged ? (\n          <Redirect to='/chat' />\n        ) : (\n          (\n            <>\n              <Layout>\n                <Header>\n                  <div className=\"logo\" />\n                </Header>\n                <Component {...props} />\n                <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n              </Layout>\n            </>\n          )\n        )\n      }\n    />\n  );\n}","import { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onGetUser } from '../../api';\nimport { checkLoginErrorAction, checkLoginSuccessAction, CHECK_LOGIN_REQUEST } from './actions';\nimport { makeSelectToken } from './selectors';\n\n\nexport function* checkLogin() {\n  const token = yield select(makeSelectToken());\n  try {\n    const { data, success } = yield call(onGetUser);\n    if (success) {\n      yield put(checkLoginSuccessAction(data.user, token));\n    } else {\n      yield put(checkLoginErrorAction({}));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(checkLoginErrorAction(err));\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(CHECK_LOGIN_REQUEST, checkLogin);\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { checkLoginAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'root';\n\nconst Startup = (props) => {\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    useEffect(() => dispatch(checkLoginAction(localStorage.getItem(\"token\"))), [dispatch]);\n   \n    return (\n        props.children\n    );\n}\n\nexport default Startup;\n","import { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport { Redirect, Switch } from \"react-router-dom\";\nimport './App.css';\nimport configureStore from './configureStore';\nimport history from './history';\nimport Chat from \"./pages/Chat\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\nimport { PrivateRoute, PublicRoute } from './pages/Route';\nimport Startup from './pages/Startup';\n\nconst store = configureStore(history);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Startup>\n          <Switch>\n            <PublicRoute exact path=\"/login\" component={Home} />\n            <PublicRoute exact path=\"/register\" component={Register} />\n            <PrivateRoute path=\"/chat\" component={Chat} />\n            <Redirect to='/login' from='/' />\n            <PublicRoute path='*' exact component={Home} />\n          </Switch>\n        </Startup>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    }\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history), logger];\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = createStore(\n    createReducer(),\n    composeEnhancers(...enhancers),\n  );\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}