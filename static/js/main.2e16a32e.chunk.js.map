{"version":3,"sources":["history.js","reducers.js","loadState.js","components/Topic.js","constant/index.js","pages/Message/index.js","pages/Chat/actions.js","pages/Chat/reducer.js","api.js","pages/Chat/selectors.js","pages/Chat/saga.js","pages/Chat/index.js","pages/Home/actions.js","pages/Home/reducer.js","pages/Home/selectors.js","pages/Home/saga.js","pages/Home/index.js","pages/Register/index.js","App.js","configureStore.js","reportWebVitals.js","index.js"],"names":["history","createBrowserHistory","createReducer","injectedReducers","rootReducer","combineReducers","router","connectRouter","layout","labelCol","span","wrapperCol","tailLayout","offset","Topic","form","isModalVisible","handleOk","handleCancel","title","centered","visible","onOk","onCancel","footer","onFinish","align","justify","Item","label","name","rules","required","message","type","htmlType","API_HOST","process","TextArea","Input","Message","slug","useParams","Form","useForm","useState","messages","setMessages","useEffect","actionCable","createConsumer","subscriptions","create","channel","chatroom_slug","connected","console","log","disconnected","received","data","prevArray","axios","get","then","res","catch","err","response","className","header","length","itemLayout","dataSource","renderItem","item","actions","author","user","username","avatar","content","datetime","created_at","values","post","resetFields","rows","CHAT_REQUEST","CHAT_SUCCESS","CHAT_ERROR","loginSuccessAction","token","initialState","body","isLoading","isLogged","error","loginPageReducer","produce","draft","action","onLogin","authState","state","auth","login","loginPageSaga","select","createSelector","substate","call","success","put","push","takeLatest","Header","Layout","Content","key","Chat","useInjectReducer","reducer","useInjectSaga","saga","useRouteMatch","path","url","rooms","setRooms","setIsModalVisible","style","padding","marginTop","minHeight","Title","gutter","onClick","topic","chatroom","prev","notification","info","description","placement","map","room","index","to","exact","component","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","Home","dispatch","useDispatch","initialValues","password","loginAction","Password","Paragraph","Register","first_name","last_name","store","composeEnhancers","compose","reduxSagaMonitorOptions","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","routerMiddleware","logger","enhancers","applyMiddleware","createInjectorsEnhancer","createStore","configureStore","serializedState","localStorage","getItem","JSON","parse","e","loadState","App","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2e16a32e.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default history;\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport history from './history';\n\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n","export const loadState = () => {\n  try {\n    const serializedState = localStorage.getItem('bankapp_state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    return JSON.parse(serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  try {\n    const serializedState = JSON.stringify(state);\n    return localStorage.setItem('bankapp_state', serializedState);\n  } catch (e) {\n    return undefined;\n  }\n};\n","import { Button, Col, Form, Input, Modal, Row } from 'antd';\nimport React from 'react';\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Topic = ({ form, isModalVisible, handleOk, handleCancel }) => {\n\n    return (\n        <>\n            <Modal title=\"Create Chat Topic\"\n                centered\n                visible={isModalVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                footer={null}>\n                <Form\n                    {...layout}\n                    form={form}\n                    onFinish={handleOk}\n                >\n                    <Row align='middle'\n                        justify='center'>\n                        <Col span={16}>\n                            <Form.Item\n                                label=\"Topic Name\"\n                                name=\"topic\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your topic name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                                </Button>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                </Form>\n            </Modal>\n        </>\n    )\n}\n\nexport default Topic;","export const API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n\nexport const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n","import actionCable from 'actioncable';\nimport { Button, Comment, Form, Input, List } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { API_HOST, WS_HOST } from '../../constant';\n\nconst { TextArea } = Input;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Message = () => {\n    const { slug } = useParams();\n    const [form] = Form.useForm();\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        const cable = actionCable.createConsumer(WS_HOST);\n        cable.subscriptions.create({\n            channel: `MessagesChannel`,\n            chatroom_slug: `messages_${slug}`\n        }, {\n            connected: () => {\n                console.log(\"connected!\")\n            },\n            disconnected: () => {\n                console.log('disconnected');\n            },\n            received: data => {\n                console.log('socket data----------------', data);\n                setMessages(prevArray => [...prevArray, data.message])\n            }\n        })\n    }, [slug])\n\n    useEffect(() => {\n        axios.get(`${API_HOST}/chatrooms/${slug}/messages`)\n            .then(res => {\n                const { data } = res.data;\n                console.log('messages-------, ', data);\n                setMessages(data.messages)\n            }).catch(err => {\n                console.log('err: ', err.response);\n            })\n    }, [slug])\n\n    const onFinish = (values) => {\n        console.log('Success:', values);\n        axios.post(`${API_HOST}/chatrooms/${slug}/messages`, {\n            \"message\": {\n                \"content\": values.content,\n                \"user_id\": 2\n            }\n        })\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n                form.resetFields();\n            }).catch(err => {\n                console.log('err: ', err.response);\n            })\n    };\n\n\n    return (\n        <div>\n            <h3>Chat Room: {slug}</h3>\n            <List\n                className=\"comment-list\"\n                header={`${messages.length} replies`}\n                itemLayout=\"horizontal\"\n                dataSource={messages}\n                renderItem={item => (\n                    <li>\n                        <Comment\n                            actions={item.actions}\n                            author={item.user.username}\n                            avatar='https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png'\n                            content={item.content}\n                            datetime={item.created_at}\n                        />\n                    </li>\n                )}\n            />\n\n            <Form\n                {...layout}\n                name=\"basic\"\n                onFinish={onFinish}\n                form={form}\n            >\n                <Form.Item\n                    name=\"content\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your message!',\n                        },\n                    ]}\n                >\n                    <TextArea rows={4} />\n                </Form.Item>\n\n                <Form.Item {...tailLayout}>\n                    <Button type=\"primary\" htmlType=\"submit\"> Submit </Button>\n                </Form.Item>\n            </Form>\n        </div >\n    );\n}\n\nexport default Message;","export const CHAT_REQUEST = 'app/ChatPage/LOGIN_REQUEST';\nexport const CHAT_SUCCESS = 'app/ChatPage/LOGIN_SUCCESS';\nexport const CHAT_ERROR = 'app/ChatPage/LOGIN_ERROR';\n\n\nexport function loginAction(user) {\n  return {\n    user,\n    type: CHAT_REQUEST,\n  };\n}\n\nexport function loginSuccessAction(user, token) {\n  return {\n    type: CHAT_SUCCESS,\n    user,\n    token,\n  };\n}\n\nexport function loginErrorAction(error) {\n  return {\n    type: CHAT_ERROR,\n    error,\n  };\n}\n","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport { CHAT_ERROR, CHAT_REQUEST, CHAT_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  token: '',\n  isLoading: false,\n  isLogged: false,\n  error: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case CHAT_REQUEST:\n      draft.body = action.user;\n      draft.isLoading = true;\n      break;\n    case CHAT_SUCCESS:\n      draft.token = action.token;\n      draft.user = action.user;\n      draft.isLogged = true;\n      draft.isLoading = false;\n      break;\n    case CHAT_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import axios from 'axios';\n\n\nexport const API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n\nexport const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n\nexport const onLogin = (user) => {\n  return axios.post(`${API_HOST}/login`, { user })\n    .then(res => res.data).catch(err => err.response)\n};","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.auth || initialState\n\nconst makeSelectBody = () =>\n  createSelector(authState, (substate) => substate.body);\n\n// const makeSelectPassword = () =>\n//   createSelector(selectLoginPageDomain, (substate) => substate.password);\n\n\nexport {\n  authState,\n  makeSelectBody,\n  // makeSelectPassword,\n};\n","import { push } from 'connected-react-router';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onLogin } from '../../api';\nimport { CHAT_REQUEST, loginSuccessAction } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* login() {\n  const user = yield select(makeSelectBody());\n  console.log('user on saga: ', user);\n  try {\n    const { data } = yield call(onLogin, user);\n    console.log('res login: ', data);\n    if (data.success) {\n      yield put(loginSuccessAction(data.user, data.token));\n      yield put(push('/chat'));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(CHAT_REQUEST, login);\n}\n","import { Button, Card, Col, Form, Layout, notification, Row, Typography } from 'antd';\nimport axios from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport { Link, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport Topic from '../../components/Topic';\nimport { API_HOST } from '../../constant';\nimport Message from '../Message';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Header, Content } = Layout;\n\nconst key = 'chat';\n\nconst Chat = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    // const dispatch = useDispatch();\n    // const onLogin = (user) => dispatch(loginAction(user));\n\n    const { path, url } = useRouteMatch();\n    const [rooms, setRooms] = useState([]);\n    const [form] = Form.useForm();\n    const [isModalVisible, setIsModalVisible] = useState(false);\n\n    useEffect(() => {\n        axios.get(`${API_HOST}/chatrooms`)\n            .then(res => {\n                const { data } = res.data;\n                setRooms(data.rooms)\n            }).catch(err => {\n                console.log('err: ', err.response);\n            })\n    }, [])\n\n    const handleOk = (topic) => {\n        axios.post(`${API_HOST}/chatrooms`, { chatroom: topic })\n            .then(res => {\n                setRooms(prev => [...prev, res.data.data.chatroom])\n                setIsModalVisible(false);\n                form.resetFields();\n                notification.info({\n                    description: 'Success!',\n                    placement: 'bottomRight',\n                });\n            }).catch(err => {\n                notification.error({\n                    message: err.response.data.message,\n                    placement: 'bottomRight'\n                })\n            })\n    };\n\n    const handleCancel = () => {\n        setIsModalVisible(false);\n    };\n\n    const showModal = () => {\n        setIsModalVisible(true);\n    };\n\n    return (\n        <>\n            <Layout>\n                <Header>\n                    <div className=\"logo\" />\n                </Header>\n                <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                    <Row align='middle' justify='center' style={{ minHeight: '300px' }}>\n                        <Col span={24}>\n                            <Typography.Title>Welcome to Chat App</Typography.Title>\n                            <Row\n                                gutter={[16, 16]}\n                                align='middle'\n                                justify='center'>\n\n                                <Col span={24}>\n                                    <h2>Chat Topic</h2>\n                                    <Button type=\"primary\" onClick={showModal}>\n                                        Create Topic\n                                    </Button>\n                                    <Topic\n                                        form={form}\n                                        isModalVisible={isModalVisible}\n                                        handleOk={handleOk}\n                                        handleCancel={handleCancel} />\n                                </Col>\n                                <Col span={10}>\n                                    <Card>\n                                        <ul>\n                                            {rooms.length <= 0 && (\n                                                <h3> No topic found </h3>\n                                            )}\n                                            {rooms.map((room, index) => (\n                                                <li key={index}>\n                                                    <Link to={`${url}/${room.slug}`}>{room.topic}</Link>\n                                                </li>\n                                            ))}\n                                        </ul>\n                                    </Card>\n                                </Col>\n\n                                <Col span={14}>\n                                    <Card>\n                                        <Switch>\n                                            <Route exact path={path} component={() => <h3>Please select a chat topic.</h3>} />\n                                            <Route path={`${path}/:slug`} component={Message} />\n                                        </Switch>\n                                    </Card>\n                                </Col>\n                            </Row>,\n                        </Col>\n                    </Row>\n                </Content>\n            </Layout>\n            <Link to=\"/\">Go Back</Link>\n        </>\n    )\n}\n\nexport default Chat;","export const LOGIN_REQUEST = 'app/LoginPage/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/LoginPage/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/LoginPage/LOGIN_ERROR';\n\n\nexport function loginAction(user) {\n  return {\n    user,\n    type: LOGIN_REQUEST,\n  };\n}\n\nexport function loginSuccessAction(user, token) {\n  return {\n    type: LOGIN_SUCCESS,\n    user,\n    token,\n  };\n}\n\nexport function loginErrorAction(error) {\n  return {\n    type: LOGIN_ERROR,\n    error,\n  };\n}\n","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport { LOGIN_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  token: '',\n  isLoading: false,\n  isLogged: false,\n  error: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      draft.body = action.user;\n      draft.isLoading = true;\n      break;\n    case LOGIN_SUCCESS:\n      draft.token = action.token;\n      draft.user = action.user;\n      draft.isLogged = true;\n      draft.isLoading = false;\n      break;\n    case LOGIN_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.auth || initialState\n\nconst makeSelectBody = () =>\n  createSelector(authState, (substate) => substate.body);\n\n// const makeSelectPassword = () =>\n//   createSelector(selectLoginPageDomain, (substate) => substate.password);\n\n\nexport {\n  authState,\n  makeSelectBody,\n  // makeSelectPassword,\n};\n","import { push } from 'connected-react-router';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onLogin } from '../../api';\nimport { loginSuccessAction, LOGIN_REQUEST } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* login() {\n  const user = yield select(makeSelectBody());\n  console.log('user on saga: ', user);\n  try {\n    const { data, success } = yield call(onLogin, user);\n    console.log('res login: ', data);\n    if (success) {\n      yield put(loginSuccessAction(data.user, data.token));\n      yield put(push('/chat'));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { loginAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Header, Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst key = 'auth';\n\nconst Home = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    const dispatch = useDispatch();\n    const onLogin = (user) => dispatch(loginAction(user));\n\n    return (\n        <>\n            <Layout>\n                <Header>\n                    <div className=\"logo\" />\n                </Header>\n                <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                    <Row align='middle'\n                        justify='center'\n                        style={{ minHeight: '300px' }}>\n                        <Col span={10}>\n                            <Typography.Title>Welcome to Chat App</Typography.Title>\n                            <Form\n                                {...layout}\n                                initialValues={{\n                                    username: 'test',\n                                    password: 'test'\n                                }}\n                                onFinish={onLogin}\n                            >\n                                <Form.Item\n                                    label=\"Username\"\n                                    name=\"username\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your username!',\n                                        },\n                                    ]}\n                                >\n                                    <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Password\"\n                                    name=\"password\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your password!',\n                                        },\n                                    ]}\n                                >\n                                    <Input.Password />\n                                </Form.Item>\n\n                                <Form.Item {...tailLayout}>\n                                    <Typography.Paragraph>\n                                        Don't you have an account? <Link to=\"/register\"> Register here</Link>\n                                    </Typography.Paragraph>\n                                </Form.Item>\n\n                                <Form.Item {...tailLayout}>\n                                    <Button type=\"primary\" htmlType=\"submit\">Login</Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Content>\n            </Layout>\n        </>\n    )\n}\n\nexport default Home;","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport axios from 'axios';\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\nimport { API_HOST } from '../../constant';\n\nconst { Header, Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Register = () => {\n\n    const onFinish = (user) => {\n        console.log('Success:', user);\n\n        axios.post(`${API_HOST}/signup`, { user })\n            .then(res => {\n                console.log(res);\n                console.log(res.data);\n            }).catch(err => {\n                console.log('err: ', err.response);\n            })\n    };\n\n    return (\n        <>\n            <Layout>\n                <Header>\n                    <div className=\"logo\" />\n                </Header>\n                <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                    <Row align='middle'\n                        justify='center'\n                        style={{ minHeight: '300px' }}>\n                        <Col span={18}>\n                            <Typography.Title>Welcome to Chat App</Typography.Title>\n                            <Form\n                                {...layout}\n                                name=\"basic\"\n                                initialValues={{\n                                    username: 'test',\n                                    password: 'test',\n                                    first_name: 'hi',\n                                    last_name: 'there'\n                                }}\n                                onFinish={onFinish}\n                            >\n                                <Form.Item\n                                    label=\"First Name\"\n                                    name=\"first_name\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your first name!',\n                                        },\n                                    ]}\n                                >\n                                    <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Last Name\"\n                                    name=\"last_name\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your last name!',\n                                        },\n                                    ]}\n                                >\n                                    <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Username\"\n                                    name=\"username\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your username!',\n                                        },\n                                    ]}\n                                >\n                                    <Input />\n                                </Form.Item>\n\n                                <Form.Item\n                                    label=\"Password\"\n                                    name=\"password\"\n                                    rules={[\n                                        {\n                                            required: true,\n                                            message: 'Please input your password!',\n                                        },\n                                    ]}\n                                >\n                                    <Input.Password />\n                                </Form.Item>\n\n                                <Form.Item {...tailLayout}>\n                                    <Typography.Paragraph>\n                                        Already have an account?   <Link to=\"/\"> Login here</Link>\n                                    </Typography.Paragraph>\n                                </Form.Item>\n\n                                <Form.Item {...tailLayout}>\n                                    <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                                </Form.Item>\n                            </Form>\n                        </Col>\n                    </Row>\n                </Content>\n            </Layout>\n        </>\n    )\n}\n\nexport default Register;","import { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport './App.css';\nimport configureStore from './configureStore';\nimport history from './history';\nimport { loadState } from './loadState';\nimport Chat from \"./pages/Chat\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\n\n\nconst initialState = loadState();\nconst store = configureStore(initialState, history);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Switch>\n          <Route exact path=\"/login\" component={Home} />\n          <Route exact path=\"/register\" component={Register} />\n          <Route path=\"/chat\" component={Chat} />\n          <Redirect to='/login' from='/' />\n          <Route path='*' exact={true} component={Home} />\n        </Switch>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(initialState = {}, history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    }\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history), logger];\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = createStore(\n    createReducer(),\n    initialState,\n    composeEnhancers(...enhancers),\n  );\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}