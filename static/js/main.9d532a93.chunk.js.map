{"version":3,"sources":["history.js","reducers.js","components/ChatRoom.js","components/RightButton.js","components/Topic.js","pages/Message/actions.js","pages/Message/reducer.js","api.js","pages/Message/selectors.js","pages/Message/saga.js","pages/Message/index.js","constant/index.js","pages/Chat/actions.js","pages/Chat/reducer.js","pages/Chat/selectors.js","pages/Chat/saga.js","pages/Chat/index.js","pages/Home/actions.js","pages/Home/reducer.js","pages/Startup/actions.js","pages/Home/selectors.js","pages/Home/saga.js","pages/Home/index.js","pages/Register/actions.js","pages/Register/reducer.js","pages/Register/selectors.js","pages/Register/saga.js","pages/Register/index.js","pages/Startup/reducer.js","pages/Startup/selectors.js","pages/Route/index.js","pages/Startup/saga.js","pages/Startup/index.js","App.js","configureStore.js","reportWebVitals.js","index.js"],"names":["history","createHashHistory","hashType","createReducer","injectedReducers","rootReducer","combineReducers","router","connectRouter","ChatRoom","toggleMenu","rooms","url","isMobile","header","length","size","itemLayout","dataSource","style","height","overflowY","bordered","renderItem","room","to","slug","onClick","bodyStyle","padding","Meta","avatar","src","title","Text","topic","RightButton","isOpen","type","icon","CloseOutlined","MenuOutlined","position","left","top","zIndex","layout","labelCol","span","wrapperCol","tailLayout","offset","Topic","form","isModalVisible","handleOk","handleCancel","centered","visible","onOk","onCancel","footer","onFinish","align","justify","Item","label","name","rules","required","message","htmlType","MESSAGE_REQUEST","MESSAGE_SUCCESS","MESSAGE_ERROR","NEW_MESSAGE_REQUEST","NEW_MESSAGE_SUCCESS","NEW_MESSAGE_ERROR","NEW_SOCKET_MESSAGE_SUCCESS","initialState","content","isLoading","error","messages","loginPageReducer","produce","draft","action","push","request","axios","create","API_HOST","process","interceptors","use","config","token","localStorage","getItem","headers","Authorization","onLogin","user","post","then","res","data","catch","err","response","onRegister","onGetUser","get","onChatroom","onCreateChatroom","chatroom","onLoadMessage","onCreateMessage","messageState","state","messageList","makeSelectSlug","createSelector","substate","onMessage","onNewMessage","loginPageSaga","select","call","success","put","console","log","takeLatest","TextArea","Input","key","Message","useInjectReducer","reducer","useInjectSaga","saga","dispatch","useDispatch","stateSelector","createStructuredSelector","useSelector","el","useRef","useParams","Form","useForm","useEffect","cableRef","actionCable","createConsumer","subscriptions","channel","chatroom_slug","connected","disconnected","received","current","scrollIntoView","consumer","disconnect","messageAction","setTimeout","overflow","ref","item","actions","author","username","datetime","created_at","resetFields","rows","placeholder","textAlign","OPEN_MODAL_REQUEST","CLOSE_MODAL_REQUEST","CHAT_REQUEST","CHAT_SUCCESS","CHAT_ERROR","CHAT_CREATE_REQUEST","CHAT_CREATE_SUCCESS","CHAT_CREATE_ERROR","chatroomCreateSuccessAction","chatroomCreateErrorAction","modalOpen","chatPageReducer","splice","chatroomState","createChatroom","chatroomPageSaga","notification","info","description","placement","Chat","useMediaQuery","maxWidth","useState","setIsOpen","useRouteMatch","path","marginTop","gutter","chatroomCreateAction","width","flex","exact","component","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_ERROR","loginErrorAction","body","CHECK_LOGIN_REQUEST","CHECK_LOGIN_SUCCESS","CHECK_LOGIN_ERROR","LOGOUT_REQUEST","checkLoginSuccessAction","checkLoginErrorAction","authState","auth","login","setItem","Content","Layout","Home","minHeight","Title","initialValues","password","loginAction","Password","Paragraph","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_ERROR","registerSuccessAction","registerState","register","Register","first_name","last_name","isLogged","checkLoginPageReducer","root","Header","Footer","PrivateRoute","Component","rest","onLogout","e","render","props","className","theme","mode","PublicRoute","restricted","checkLogin","checkLogout","clear","Startup","children","store","composeEnhancers","compose","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","routerMiddleware","logger","enhancers","applyMiddleware","createInjectorsEnhancer","createStore","configureStore","App","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d532a93.chunk.js","sourcesContent":["import { createHashHistory } from 'history';\n\nconst history = createHashHistory({ hashType: \"hashbang\" });\n\nexport default history;\n","import { connectRouter } from 'connected-react-router';\nimport { combineReducers } from 'redux';\nimport history from './history';\n\nexport default function createReducer(injectedReducers = {}) {\n  const rootReducer = combineReducers({\n    router: connectRouter(history),\n    ...injectedReducers,\n  });\n\n  return rootReducer;\n}\n","import { Avatar, Card, List, Typography } from 'antd';\nimport React from 'react';\nimport { Link } from \"react-router-dom\";\n\n\nconst ChatRoom = ({ toggleMenu, rooms, url , isMobile}) => {\n\n    const getHeight = ()=> {\n        return isMobile ? 'calc(100vh - 210px)': 'calc(100vh - 270px)'\n    }\n\n    return (\n        <>\n            <Card>\n                <h3>Select Chat Room</h3>\n                <List header={`${rooms.length} chat rooms`}\n                    size=\"small\"\n                    itemLayout=\"horizontal\"\n                    dataSource={rooms}\n                    style={{\n                        height: getHeight(),\n                        overflowY: 'scroll'\n                    }}\n                    bordered\n                    renderItem={room => (\n                        <Link to={`${url}/${room.slug}`} onClick={toggleMenu}>\n                            <Card bodyStyle={{ padding: 10 }}>\n                                <Card.Meta\n                                    avatar={<Avatar src=\"https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png\" />}\n                                    title={<Typography.Text>{room.topic}</Typography.Text>} />\n                            </Card>\n                        </Link>\n                    )}\n                />\n            </Card>\n        </>\n    )\n}\n\nexport default ChatRoom;","import { CloseOutlined, MenuOutlined } from '@ant-design/icons';\nimport { Button } from 'antd';\nimport React from 'react';\n\nconst RightButton = ({ isOpen, toggleMenu }) => {\n\n    return (\n        <>\n            <Button type=\"primary\"\n                size=\"large\"\n                icon={isOpen ? <CloseOutlined /> : <MenuOutlined />}\n                onClick={toggleMenu}\n                style={{\n                    position: \"fixed\",\n                    left: \"20px\",\n                    top: '75px',\n                    zIndex: 2\n                }} />\n        </>\n    )\n\n}\n\nexport default RightButton;","import { Button, Col, Form, Input, Modal, Row } from 'antd';\nimport React from 'react';\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst Topic = ({ form, isModalVisible, handleOk, handleCancel }) => {\n\n    return (\n        <>\n            <Modal title=\"Create Chat Topic\"\n                centered\n                visible={isModalVisible}\n                onOk={handleOk}\n                onCancel={handleCancel}\n                footer={null}>\n                <Form\n                    {...layout}\n                    form={form}\n                    onFinish={handleOk}\n                >\n                    <Row align='middle'\n                        justify='center'>\n                        <Col span={16}>\n                            <Form.Item\n                                label=\"Topic Name\"\n                                name=\"topic\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your topic name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">\n                                    Submit\n                                </Button>\n                            </Form.Item>\n                        </Col>\n                    </Row>\n                </Form>\n            </Modal>\n        </>\n    )\n}\n\nexport default Topic;","export const MESSAGE_REQUEST = 'app/MessagePage/MESSAGE_REQUEST';\nexport const MESSAGE_SUCCESS = 'app/MessagePage/MESSAGE_SUCCESS';\nexport const MESSAGE_ERROR = 'app/MessagePage/MESSAGE_ERROR';\n\nexport const NEW_MESSAGE_REQUEST = 'app/MessagePage/NEW_MESSAGE_REQUEST';\nexport const NEW_MESSAGE_SUCCESS = 'app/MessagePage/NEW_MESSAGE_SUCCESS';\nexport const NEW_MESSAGE_ERROR = 'app/MessagePage/NEW_MESSAGE_ERROR';\n\nexport const NEW_SOCKET_MESSAGE_SUCCESS = 'app/MessagePage/NEW_SOCKET_MESSAGE_SUCCESS';\n\n\nexport function messageAction(slug) {\n  return {\n    slug,\n    type: MESSAGE_REQUEST,\n  };\n}\n\nexport function messageSuccessAction(messages) {\n  return {\n    type: MESSAGE_SUCCESS,\n    messages,\n  };\n}\n\nexport function messageErrorAction(error) {\n  return {\n    type: MESSAGE_ERROR,\n    error,\n  };\n}\n\nexport function newMessageAction(content) {\n  return {\n    type: NEW_MESSAGE_REQUEST,\n    content,\n  };\n}\n\nexport function newMessageSuccessAction(message) {\n  return {\n    type: NEW_MESSAGE_SUCCESS,\n    message,\n  };\n}\n\nexport function newMessageErrorAction(error) {\n  return {\n    type: NEW_MESSAGE_ERROR,\n    error,\n  };\n}\n\nexport function addNewMessageSocketAction(message) {\n  return {\n    type: NEW_SOCKET_MESSAGE_SUCCESS,\n    message,\n  };\n}","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport { MESSAGE_ERROR, MESSAGE_REQUEST, MESSAGE_SUCCESS, NEW_MESSAGE_ERROR, NEW_MESSAGE_REQUEST, NEW_MESSAGE_SUCCESS, NEW_SOCKET_MESSAGE_SUCCESS } from './actions';\n\nexport const initialState = {\n  content: null,\n  isLoading: false,\n  error: {},\n  messages: [],\n  slug: null,\n  message: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case MESSAGE_REQUEST:\n      draft.slug = action.slug;\n      draft.isLoading = true;\n      break;\n    case MESSAGE_SUCCESS:\n      draft.messages = action.messages;\n      draft.isLoading = false;\n      break;\n    case MESSAGE_ERROR:\n      draft.isLoading = false;\n      draft.error = action.error;\n      break;\n\n    case NEW_MESSAGE_REQUEST:\n      draft.isLoading = true;\n      draft.content = action.content\n      break;\n    case NEW_MESSAGE_SUCCESS:\n      draft.message = action.message;\n      draft.isLoading = false;\n      break;\n    case NEW_MESSAGE_ERROR:\n      draft.isLoading = false;\n      draft.error = action.error;\n      break;\n\n    case NEW_SOCKET_MESSAGE_SUCCESS:\n      draft.messages.push(action.message);\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import axios from 'axios';\n\nconst request = axios.create();\nconst API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n// const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n\nrequest.interceptors.request.use((config) => {\n  const token = localStorage.getItem(\"token\");\n  config.headers.Authorization = `Bearer ${token}`;\n  return config;\n})\n\nexport const onLogin = (user) => {\n  return axios.post(`${API_HOST}/login`, { user })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onRegister = (user) => {\n  return axios.post(`${API_HOST}/signup`, { user })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onGetUser = () => {\n  return request.get(`${API_HOST}/user`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onChatroom = () => {\n  return request.get(`${API_HOST}/chatrooms`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n};\n\nexport const onCreateChatroom = (topic) => {\n  return request.post(`${API_HOST}/chatrooms`, { chatroom: topic })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onLoadMessage = (slug) => {\n  return request.get(`${API_HOST}/chatrooms/${slug}/messages`)\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}\n\nexport const onCreateMessage = (slug, content) => {\n  return request.post(`${API_HOST}/chatrooms/${slug}/messages`,\n    {\n      message: { content }\n    })\n    .then(res => res.data)\n    .catch(err => err.response.data || err.response)\n}","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst messageState = state => state.messageList || initialState\n\nconst makeSelectContent = () =>\n  createSelector(messageState, (substate) => substate.content);\n\n  const makeSelectSlug = () =>\n  createSelector(messageState, (substate) => substate.slug);\n\nconst makeSelectMessages = () =>\n  createSelector(messageState, (substate) => substate.messages);\n\n\nexport {\n  messageState,\n  makeSelectContent,\n  makeSelectMessages,\n  makeSelectSlug,\n};\n","import { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onCreateMessage, onLoadMessage } from '../../api';\nimport { messageSuccessAction, MESSAGE_REQUEST, newMessageSuccessAction, NEW_MESSAGE_REQUEST } from './actions';\nimport { makeSelectContent, makeSelectSlug } from './selectors';\n\nexport function* onMessage() {\n  const slug = yield select(makeSelectSlug());\n  try {\n    const { data, success } = yield call(onLoadMessage, slug);\n    if (success) {\n      yield put(messageSuccessAction(data.messages));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport function* onNewMessage() {\n  const slug = yield select(makeSelectSlug());\n  const content = yield select(makeSelectContent());\n  try {\n    const { data, success } = yield call(onCreateMessage, slug, content);\n    if (success) {\n      yield put(newMessageSuccessAction(data.message));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(MESSAGE_REQUEST, onMessage);\n  yield takeLatest(NEW_MESSAGE_REQUEST, onNewMessage);\n}\n","import actionCable from 'actioncable';\nimport { Button, Card, Comment, Form, Input, List } from 'antd';\nimport React, { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { createStructuredSelector } from 'reselect';\nimport { WS_HOST } from '../../constant';\nimport { addNewMessageSocketAction, messageAction, newMessageAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\nimport { makeSelectMessages } from './selectors';\n\nconst { TextArea } = Input;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst key = 'messageList';\n\nconst Message = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    const dispatch = useDispatch();\n    const stateSelector = createStructuredSelector({\n        messages: makeSelectMessages(),\n    });\n    const { messages } = useSelector(stateSelector);\n\n    const el = useRef(null);\n    const { slug } = useParams();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        const cable = actionCable.createConsumer(WS_HOST);\n        const cableRef = cable.subscriptions.create({\n            channel: `MessagesChannel`,\n            chatroom_slug: `messages_${slug}`\n        }, {\n            connected: () => {\n                console.log(\"connected!\")\n            },\n            disconnected: () => {\n                console.log('disconnected');\n            },\n            received: data => {\n                dispatch(addNewMessageSocketAction(data.message));\n                console.log('inputEl: ', el);\n                el.current?.scrollIntoView()\n            }\n        })\n        return () => {\n            cableRef.consumer.disconnect();\n        };\n    }, [slug, dispatch])\n\n    useEffect(() => {\n        dispatch(messageAction(slug));\n        setTimeout(() => el.current.scrollIntoView(), 500)\n    }, [slug, dispatch])\n\n\n    return (\n        <>\n            <h3>Chat Room: {slug}</h3>\n            <List style={{\n                height: 'calc(100vh - 400px)',\n                overflow: 'auto'\n            }}\n                header={`${messages.length} replies`}\n                dataSource={messages}\n                bordered\n                footer={<div ref={el} />}\n                renderItem={item => (\n                    <Card bodyStyle={{ padding: '0 10px' }}>\n                        <Comment\n                            actions={item.actions}\n                            author={item.user.username}\n                            avatar='https://zos.alipayobjects.com/rmsportal/ODTLcjxAfvqbxHnVXCYX.png'\n                            content={item.content}\n                            datetime={item.created_at}\n                        />\n                    </Card>\n                )}\n            />\n\n            <Form\n                {...layout}\n                name=\"basic\"\n                onFinish={(message) => { dispatch(newMessageAction(message.content)); form.resetFields(); }}\n                form={form}\n            >\n                <Form.Item\n                    wrapperCol={{ span: 24 }}\n                    name=\"content\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your message!',\n                        },\n                    ]}\n                >\n                    <TextArea rows={2} placeholder='Message...' />\n                </Form.Item>\n\n                <Form.Item\n                    wrapperCol={{ span: 24 }} style={{ textAlign: 'right' }}>\n                    <Button type=\"primary\" htmlType=\"submit\"> Submit </Button>\n                </Form.Item>\n            </Form>\n        </>\n    );\n}\n\nexport default Message;","export const API_HOST = process.env.REACT_APP_API_HOST || 'http://localhost:4000'\n\nexport const WS_HOST = process.env.REACT_APP_WS_HOST || 'ws://localhost:4000/cable'\n","export const OPEN_MODAL_REQUEST = 'app/ChatPage/OPEN_MODAL_REQUEST';\nexport const CLOSE_MODAL_REQUEST = 'app/ChatPage/CLOSE_MODAL_REQUEST';\nexport const CHAT_REQUEST = 'app/ChatPage/CHAT_REQUEST';\nexport const CHAT_SUCCESS = 'app/ChatPage/CHAT_SUCCESS';\nexport const CHAT_ERROR = 'app/ChatPage/CHAT_ERROR';\nexport const CHAT_CREATE_REQUEST = 'app/ChatPage/CHAT_CREATE_REQUEST';\nexport const CHAT_CREATE_SUCCESS = 'app/ChatPage/CHAT_CREATE_SUCCESS';\nexport const CHAT_CREATE_ERROR = 'app/ChatPage/CHAT_CREATE_ERROR';\n\n\nexport function opneModalAction() {\n  return {\n    type: OPEN_MODAL_REQUEST,\n  };\n}\n\nexport function closeModalAction() {\n  return {\n    type: CLOSE_MODAL_REQUEST,\n  };\n}\n\nexport function chatroomAction() {\n  return {\n    type: CHAT_REQUEST,\n  };\n}\n\nexport function chatroomSuccessAction(rooms) {\n  return {\n    type: CHAT_SUCCESS,\n    rooms,\n  };\n}\n\nexport function chatroomErrorAction(error) {\n  return {\n    type: CHAT_ERROR,\n    error,\n  };\n}\n\nexport function chatroomCreateAction(topic) {\n  return {\n    type: CHAT_CREATE_REQUEST,\n    topic\n  };\n}\n\nexport function chatroomCreateSuccessAction(chatroom, message) {\n  return {\n    type: CHAT_CREATE_SUCCESS,\n    chatroom,\n    message\n  };\n}\n\nexport function chatroomCreateErrorAction(error, message) {\n  return {\n    type: CHAT_CREATE_ERROR,\n    error,\n    message\n  };\n}","/*\n *\n * LoginPage reducer\n *\n */\n\nimport produce from 'immer';\nimport {\n  CHAT_CREATE_ERROR,\n  CHAT_CREATE_REQUEST,\n  CHAT_CREATE_SUCCESS,\n  CHAT_ERROR,\n  CHAT_REQUEST,\n  CHAT_SUCCESS,\n  CLOSE_MODAL_REQUEST,\n  OPEN_MODAL_REQUEST\n} from './actions';\n\nexport const initialState = {\n  rooms: [],\n  isLoading: false,\n  error: {},\n  topic: {},\n  message: \"\",\n  modalOpen: false,\n};\n\nconst chatPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case CHAT_REQUEST:\n      draft.isLoading = true;\n      break;\n    case CHAT_SUCCESS:\n      draft.rooms = action.rooms;\n      draft.isLoading = false;\n      break;\n    case CHAT_ERROR:\n      draft.error = action.error;\n      draft.isLoading = false;\n      break;\n\n    case CHAT_CREATE_REQUEST:\n      draft.isLoading = true;\n      draft.topic = action.topic\n      break;\n    case CHAT_CREATE_SUCCESS:\n      draft.rooms.splice(0, 0, action.chatroom);\n      draft.message = action.message;\n      draft.isLoading = false;\n      draft.modalOpen = false;\n      break;\n    case CHAT_CREATE_ERROR:\n      draft.error = action.error;\n      draft.message = action.message;\n      draft.isLoading = true;\n      break;\n\n    case OPEN_MODAL_REQUEST:\n      draft.modalOpen = true;\n      break;\n\n    case CLOSE_MODAL_REQUEST:\n      draft.modalOpen = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default chatPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst chatroomState = state => state.chatroom || initialState\n\nconst makeSelectRooms = () =>\n  createSelector(chatroomState, (substate) => substate.rooms);\n\nconst makeSelectError = () =>\n  createSelector(chatroomState, (substate) => substate.error);\n\nconst makeSelectModalOpen = () =>\n  createSelector(chatroomState, (substate) => substate.modalOpen);\n\n  const makeSelectMessage = () =>\n  createSelector(chatroomState, (substate) => substate.message);\n\nconst makeSelectTopic = () =>\n  createSelector(chatroomState, (substate) => substate.topic);\n\nexport {\n  chatroomState,\n  makeSelectRooms,\n  makeSelectError,\n  makeSelectModalOpen,\n  makeSelectTopic,\n  makeSelectMessage,\n};\n","import { notification } from 'antd';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onChatroom, onCreateChatroom } from '../../api';\nimport {\n  chatroomCreateErrorAction,\n  chatroomCreateSuccessAction,\n  chatroomSuccessAction,\n  CHAT_CREATE_REQUEST,\n  CHAT_REQUEST\n} from './actions';\nimport { makeSelectTopic } from './selectors';\n\nexport function* chatroom() {\n  try {\n    const { data, success } = yield call(onChatroom);\n    if (success) {\n      yield put(chatroomSuccessAction(data.rooms));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n  }\n}\n\nexport function* createChatroom() {\n  const topic = yield select(makeSelectTopic());\n  try {\n    const { data, success, message } = yield call(onCreateChatroom, topic);\n    if (success) {\n      yield put(chatroomCreateSuccessAction(data.chatroom, message));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(chatroomCreateErrorAction({}, message));\n      notification.error({\n        message: message,\n        placement: 'bottomRight'\n      })\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(chatroomCreateErrorAction(err, \"\"));\n    notification.error({\n      message: err,\n      placement: 'bottomRight'\n    })\n  }\n}\nexport default function* chatroomPageSaga() {\n  yield takeLatest(CHAT_REQUEST, chatroom);\n  yield takeLatest(CHAT_CREATE_REQUEST, createChatroom);\n}\n","import { Button, Card, Col, Form, Layout, Row } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { createStructuredSelector } from 'reselect';\nimport ChatRoom from '../../components/ChatRoom';\nimport RightButton from '../../components/RightButton';\nimport Topic from '../../components/Topic';\nimport Message from '../Message';\nimport { chatroomAction, chatroomCreateAction, closeModalAction, opneModalAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\nimport { makeSelectModalOpen, makeSelectRooms } from './selectors';\n\nconst key = 'chatroom';\n\nconst Chat = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n\n    const isMobile = useMediaQuery({ maxWidth: 767 })\n    const [isOpen, setIsOpen] = useState(false);\n\n    const dispatch = useDispatch();\n    const stateSelector = createStructuredSelector({\n        rooms: makeSelectRooms(),\n        isModalVisible: makeSelectModalOpen(),\n    });\n    const { rooms, isModalVisible } = useSelector(stateSelector);\n    const { path, url } = useRouteMatch();\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n        dispatch(chatroomAction());\n    }, [dispatch])\n\n    const toggleMenu = () => {\n        if (isMobile) { setIsOpen(!isOpen) }\n    }\n\n    return (\n        <>\n            <Layout style={{ marginTop: 20 }}>\n                <Row gutter={[16, 16]}\n                    justify='center'\n                    style={{ height: '250px' }}>\n\n                    <Col span={24}>\n                        <Row gutter={[16, 16]}\n                            align='middle'\n                            justify='end'>\n                            <Col>\n                                <Button\n                                    type=\"primary\"\n                                    onClick={() => dispatch(opneModalAction())}>\n                                    Create Topic\n                                </Button>\n                            </Col>\n                        </Row>\n\n                        <Topic\n                            form={form}\n                            isModalVisible={isModalVisible}\n                            handleOk={(topic) => dispatch(chatroomCreateAction(topic))}\n                            handleCancel={() => dispatch(closeModalAction())} />\n                    </Col>\n\n                    <Col span={24}>\n                        <Row gutter={[16, 16]}\n                            align='stretch'\n                            justify='center'>\n\n                            {isMobile && (\n                                <RightButton isOpen={isOpen} toggleMenu={toggleMenu} />\n                            )}\n\n                            {isOpen && isMobile && (\n                                <Col style={{\n                                    position: 'fixed',\n                                    zIndex: 1,\n                                    top: 64,\n                                    width: '100%'\n                                }}>\n                                    <ChatRoom toggleMenu={toggleMenu} rooms={rooms} url={url} isMobile={isMobile}/>\n                                </Col>\n                            )}\n\n                            {!isMobile && (\n                                <Col style={{\n                                    width: '35%'\n                                }}>\n                                    <ChatRoom toggleMenu={toggleMenu} rooms={rooms} url={url} isMobile={isMobile}/>\n                                </Col>\n\n                            )}\n\n                            <Col flex=\"auto\">\n                                <Card>\n                                    {rooms.length <= 0 ? (\n                                        <h3> No topic found </h3>\n                                    ) : (\n                                        <Switch>\n                                            <Route exact path={path} component={() => (\n                                                <div style={{ textAlign: 'center' }}>\n                                                    <h3>Please select a chat topic...</h3>\n                                                    {isMobile && (\n                                                        <Button type='primary' onClick={toggleMenu}>Open Chat Room</Button>\n                                                    )}\n                                                </div>\n                                            )} />\n                                            <Route path={`${path}/:slug`} component={Message} />\n                                        </Switch>\n                                    )}\n\n                                </Card>\n                            </Col>\n                        </Row>\n\n                    </Col>\n                </Row>\n            </Layout>\n        </>\n    )\n}\n\nexport default Chat;","export const LOGIN_REQUEST = 'app/LoginPage/LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'app/LoginPage/LOGIN_SUCCESS';\nexport const LOGIN_ERROR = 'app/LoginPage/LOGIN_ERROR';\n\n\nexport function loginAction(user) {\n  return {\n    user,\n    type: LOGIN_REQUEST,\n  };\n}\n\nexport function loginSuccessAction() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nexport function loginErrorAction(error) {\n  return {\n    type: LOGIN_ERROR,\n    error,\n  };\n}\n","import produce from 'immer';\nimport { LOGIN_ERROR, LOGIN_REQUEST, LOGIN_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  isLoading: false,\n  error: {},\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case LOGIN_REQUEST:\n      draft.body = action.user;\n      draft.isLoading = true;\n      break;\n    case LOGIN_SUCCESS:\n      draft.isLoading = false;\n      break;\n    case LOGIN_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","export const CHECK_LOGIN_REQUEST = 'app/StartUpPage/CHECK_LOGIN_REQUEST';\nexport const CHECK_LOGIN_SUCCESS = 'app/StartUpPage/CHECK_LOGIN_SUCCESS';\nexport const CHECK_LOGIN_ERROR = 'app/StartUpPage/CHECK_LOGIN_ERROR';\nexport const LOGOUT_REQUEST = 'app/StartUpPage/LOGOUT_REQUEST';\n\nexport function checkLoginAction(token) {\n  return {\n    type: CHECK_LOGIN_REQUEST,\n    token,\n  };\n}\n\nexport function checkLoginSuccessAction(user, token) {\n  return {\n    type: CHECK_LOGIN_SUCCESS,\n    token,\n    user\n  };\n}\n\nexport function checkLoginErrorAction(error) {\n  return {\n    type: CHECK_LOGIN_ERROR,\n    error,\n  };\n}\n\nexport function logoutAction() {\n  return {\n    type: LOGOUT_REQUEST,\n  };\n}\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.auth || initialState\n\nconst makeSelectBody = () =>\n  createSelector(authState, (substate) => substate.body);\n\nexport {\n  authState,\n  makeSelectBody,\n};\n","import { notification } from 'antd';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onLogin } from '../../api';\nimport { checkLoginSuccessAction } from '../Startup/actions';\nimport { loginErrorAction, loginSuccessAction, LOGIN_REQUEST } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* login() {\n  const user = yield select(makeSelectBody());\n  try {\n    const { data, success, message } = yield call(onLogin, user);\n    if (success) {\n      localStorage.setItem('token', data.token);\n      yield put(loginSuccessAction());\n      yield put(checkLoginSuccessAction(data.user, data.token));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(loginErrorAction({}));\n      notification.error({\n        description: message,\n        placement: 'bottomRight',\n      });\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(loginErrorAction(err));\n    notification.info({\n      description: err,\n      placement: 'bottomRight',\n    });\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(LOGIN_REQUEST, login);\n}\n","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { loginAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\n\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst key = 'auth';\n\nconst Home = () => {\n\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    return (\n        <>\n\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Row align='middle'\n                    justify='center'\n                    style={{ minHeight: '300px' }}>\n                    <Col span={10}>\n                        <Typography.Title>Welcome to Chat App</Typography.Title>\n                        <Form\n                            {...layout}\n                            initialValues={{\n                                username: 'test',\n                                password: 'test'\n                            }}\n                            onFinish={(user) => dispatch(loginAction(user))}\n                        >\n                            <Form.Item\n                                label=\"Username\"\n                                name=\"username\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Password\"\n                                name=\"password\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!',\n                                    },\n                                ]}\n                            >\n                                <Input.Password />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Typography.Paragraph>\n                                    Don't you have an account? <Link to=\"/register\"> Register here</Link>\n                                </Typography.Paragraph>\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">Login</Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </Content>\n        </>\n    )\n}\n\nexport default Home;","export const REGISTER_REQUEST = 'app/RegisterPage/REGISTER_REQUEST';\nexport const REGISTER_SUCCESS = 'app/RegisterPage/REGISTER_SUCCESS';\nexport const REGISTER_ERROR = 'app/RegisterPage/REGISTER_ERROR';\n\n\nexport function registerAction(body) {\n  return {\n    body,\n    type: REGISTER_REQUEST,\n  };\n}\n\nexport function registerSuccessAction(user, message) {\n  return {\n    type: REGISTER_SUCCESS,\n    user,\n    message,\n  };\n}\n\nexport function registerErrorAction(error, message) {\n  return {\n    type: REGISTER_ERROR,\n    error,\n  };\n}\n","import produce from 'immer';\nimport { REGISTER_ERROR, REGISTER_REQUEST, REGISTER_SUCCESS } from './actions';\n\nexport const initialState = {\n  body: {},\n  message: '',\n  isLoading: false,\n  error: {},\n  user: {}\n};\n\nconst loginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case REGISTER_REQUEST:\n      draft.body = action.body;\n      draft.isLoading = true;\n      break;\n    case REGISTER_SUCCESS:\n      draft.message = action.message;\n      draft.user = action.user;\n      draft.isLoading = false;\n      break;\n    case REGISTER_ERROR:\n      draft.body = action.error;\n      draft.message = action.message;\n      draft.isLoading = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default loginPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst registerState = state => state.register || initialState\n\nconst makeSelectBody = () =>\n  createSelector(registerState, (substate) => substate.body);\n\nexport {\n  registerState,\n  makeSelectBody,\n};\n","import { notification } from 'antd';\nimport { push } from 'connected-react-router';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onRegister } from '../../api';\nimport { registerErrorAction, registerSuccessAction, REGISTER_REQUEST } from './actions';\nimport { makeSelectBody } from './selectors';\n\nexport function* register() {\n  const user = yield select(makeSelectBody());\n  try {\n    const { data, success, message } = yield call(onRegister, user);\n    if (success) {\n      yield put(registerSuccessAction(data.user, message));\n      yield put(push('/login'));\n      notification.info({\n        description: message,\n        placement: 'bottomRight',\n      });\n    } else {\n      yield put(registerErrorAction({}, message));\n      notification.error({\n        message: message,\n        placement: 'bottomRight'\n      })\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    notification.error({\n      message: err,\n      placement: 'bottomRight'\n    })\n  }\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(REGISTER_REQUEST, register);\n}\n","import { Button, Col, Form, Input, Layout, Row, Typography } from 'antd';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from \"react-router-dom\";\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { registerAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst { Content } = Layout;\n\nconst layout = {\n    labelCol: { span: 8 },\n    wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n    wrapperCol: { offset: 8, span: 16 },\n};\n\nconst key = 'register';\n\nconst Register = () => {\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    return (\n        <>\n            <Content style={{ padding: '0 50px', marginTop: 64 }}>\n                <Row align='middle'\n                    justify='center'\n                    style={{ minHeight: '300px' }}>\n                    <Col span={10}>\n                        <Typography.Title>Welcome to Chat App</Typography.Title>\n                        <Form\n                            {...layout}\n                            name=\"basic\"\n                            initialValues={{\n                                username: 'test',\n                                password: 'test',\n                                first_name: 'hi',\n                                last_name: 'there'\n                            }}\n                            onFinish={(user) => dispatch(registerAction(user))}\n                        >\n                            <Form.Item\n                                label=\"First Name\"\n                                name=\"first_name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your first name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Last Name\"\n                                name=\"last_name\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your last name!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Username\"\n                                name=\"username\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your username!',\n                                    },\n                                ]}\n                            >\n                                <Input />\n                            </Form.Item>\n\n                            <Form.Item\n                                label=\"Password\"\n                                name=\"password\"\n                                rules={[\n                                    {\n                                        required: true,\n                                        message: 'Please input your password!',\n                                    },\n                                ]}\n                            >\n                                <Input.Password />\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Typography.Paragraph>\n                                    Already have an account?   <Link to=\"/\"> Login here</Link>\n                                </Typography.Paragraph>\n                            </Form.Item>\n\n                            <Form.Item {...tailLayout}>\n                                <Button type=\"primary\" htmlType=\"submit\">Register</Button>\n                            </Form.Item>\n                        </Form>\n                    </Col>\n                </Row>\n            </Content>\n        </>\n    )\n}\n\nexport default Register;","import produce from 'immer';\nimport { CHECK_LOGIN_ERROR, CHECK_LOGIN_REQUEST, CHECK_LOGIN_SUCCESS, LOGOUT_REQUEST } from './actions';\n\nexport const initialState = {\n  token: '',\n  isLoading: false,\n  isLogged: false,\n  error: {},\n  user: {}\n};\n\nconst checkLoginPageReducer = produce((draft, action) => {\n  switch (action.type) {\n    case CHECK_LOGIN_REQUEST:\n      draft.token = action.token;\n      draft.isLoading = true;\n      break;\n    case CHECK_LOGIN_SUCCESS:\n      draft.token = action.token;\n      draft.user = action.user;\n      draft.isLogged = true;\n      draft.isLoading = false;\n      break;\n    case CHECK_LOGIN_ERROR:\n      draft.body = action.error;\n      draft.isLoading = false;\n      break;\n    case LOGOUT_REQUEST:\n      draft.isLogged = false;\n      break;\n    default:\n      return draft;\n  }\n}, initialState);\n\nexport default checkLoginPageReducer;\n","import { createSelector } from 'reselect';\nimport { initialState } from './reducer';\n\nconst authState = state => state.root || initialState\n\nconst makeSelectIsLogged = () =>\n  createSelector(authState, (substate) => substate.isLogged);\n\n  const makeSelectToken= () =>\n  createSelector(authState, (substate) => substate.token);\n\nexport {\n  authState,\n  makeSelectIsLogged,\n  makeSelectToken,\n};\n","import { Col, Layout, Menu, Row } from 'antd';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useMediaQuery } from 'react-responsive';\nimport { Redirect, Route } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { logoutAction } from '../Startup/actions';\nimport { makeSelectIsLogged } from '../Startup/selectors';\n\nconst { Header, Footer, Content } = Layout;\n\nconst stateSelector = createStructuredSelector({\n  isLogged: makeSelectIsLogged(),\n});\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n  const { isLogged } = useSelector(stateSelector);\n  const dispatch = useDispatch();\n\n  const isMobile = useMediaQuery({ maxWidth: 767 })\n\n  const onLogout = (e) => {\n    dispatch(logoutAction())\n  }\n\n\n  useEffect(() => {\n    console.log('ismpb', isMobile);\n  }, [isMobile])\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogged ? (\n          <>\n            <Layout>\n              <Header style={{ position: 'fixed', zIndex: 1, width: '100%' }}>\n                <Row justify=\"space-between\">\n                  <Col span={10}>\n                    <div className=\"logo\" />\n                    <Menu theme=\"dark\"\n                      mode=\"horizontal\">\n                      <Menu.Item key=\"1\">Home</Menu.Item>\n                      {/* <Menu.Item key=\"2\">Feeds</Menu.Item> */}\n                    </Menu>\n                  </Col>\n                  <Col span={8}>\n                    <Row justify=\"end\">\n                      <Col>\n                        <Menu theme=\"dark\"\n                          mode=\"horizontal\"\n                          onClick={onLogout}>\n                          <Menu.Item key=\"3\">Profile</Menu.Item>\n                          <Menu.Item key=\"4\">Logout</Menu.Item>\n                        </Menu>\n                      </Col>\n                    </Row>\n                  </Col>\n                </Row>\n              </Header>\n              <Content style={{\n                padding: isMobile?  '0 15px': '0 50px',\n                marginTop: 64,\n                minHeight: 'calc(100vh - 120px)'\n              }}>\n                <Component {...props} />\n              </Content>\n              <Footer style={{ textAlign: 'center' }}>ChatApp ©2021 Created by Robiul Hassan</Footer>\n            </Layout>\n          </>\n        ) : <Redirect to='/login' />\n      }\n    />\n  );\n}\n\nexport const PublicRoute = ({ component: Component, restricted, ...rest }) => {\n  const { isLogged } = useSelector(stateSelector);\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        isLogged ? (\n          <Redirect to='/chat' />\n        ) : (\n          (\n            <>\n              <Layout>\n                <Header>\n                  <div className=\"logo\" />\n                </Header>\n                <Component {...props} />\n                <Footer style={{ textAlign: 'center' }}>ChatApp ©2021 Created by Robiul Hassan</Footer>\n              </Layout>\n            </>\n          )\n        )\n      }\n    />\n  );\n}","import { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { onGetUser } from '../../api';\nimport { checkLoginErrorAction, checkLoginSuccessAction, CHECK_LOGIN_REQUEST, LOGOUT_REQUEST } from './actions';\nimport { makeSelectToken } from './selectors';\n\n\nexport function* checkLogin() {\n  const token = yield select(makeSelectToken());\n  try {\n    const { data, success } = yield call(onGetUser);\n    if (success) {\n      yield put(checkLoginSuccessAction(data.user, token));\n    } else {\n      yield put(checkLoginErrorAction({}));\n    }\n  } catch (err) {\n    console.log(\"Error => \", err);\n    yield put(checkLoginErrorAction(err));\n  }\n}\n\nexport function checkLogout() {\n localStorage.clear();\n}\n\nexport default function* loginPageSaga() {\n  yield takeLatest(CHECK_LOGIN_REQUEST, checkLogin);\n  yield takeLatest(LOGOUT_REQUEST, checkLogout);\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useInjectReducer, useInjectSaga } from 'redux-injectors';\nimport { checkLoginAction } from './actions';\nimport reducer from './reducer';\nimport saga from './saga';\n\nconst key = 'root';\n\nconst Startup = (props) => {\n    useInjectReducer({ key, reducer });\n    useInjectSaga({ key, saga });\n    const dispatch = useDispatch();\n\n    useEffect(() => dispatch(checkLoginAction(localStorage.getItem(\"token\"))), [dispatch]);\n   \n    return (\n        props.children\n    );\n}\n\nexport default Startup;\n","import { ConnectedRouter } from 'connected-react-router';\nimport { Provider } from 'react-redux';\nimport { Redirect, Switch } from \"react-router-dom\";\nimport './App.css';\nimport configureStore from './configureStore';\nimport history from './history';\nimport Chat from \"./pages/Chat\";\nimport Home from \"./pages/Home\";\nimport Register from \"./pages/Register\";\nimport { PrivateRoute, PublicRoute } from './pages/Route';\nimport Startup from './pages/Startup';\n\nconst store = configureStore(history);\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <ConnectedRouter history={history}>\n        <Startup>\n          <Switch>\n            <PublicRoute exact path=\"/login\" component={Home} />\n            <PublicRoute exact path=\"/register\" component={Register} />\n            <PrivateRoute path=\"/chat\" component={Chat} />\n            <Redirect to='/login' from='/' />\n            <PublicRoute path='*' exact component={Home} />\n          </Switch>\n        </Startup>\n      </ConnectedRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { routerMiddleware } from 'connected-react-router';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport createReducer from './reducers';\n\nexport default function configureStore(history) {\n  let composeEnhancers = compose;\n  const reduxSagaMonitorOptions = {};\n\n  // If Redux Dev Tools and Saga Dev Tools Extensions are installed, enable them\n  /* istanbul ignore next */\n  if (typeof window === 'object') {\n    /* eslint-disable no-underscore-dangle */\n    if (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) {\n      composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({});\n    }\n  }\n\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  const middlewares = [sagaMiddleware, routerMiddleware(history), logger];\n\n  const enhancers = [\n    applyMiddleware(...middlewares),\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = createStore(\n    createReducer(),\n    composeEnhancers(...enhancers),\n  );\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}